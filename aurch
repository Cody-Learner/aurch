#!/bin/bash
# aurch 2021-12-10
# dependencies: base-devel arch-install-scripts git pacutils jshon *
# * Aurutils is installed and setup in the chroot. Not as a dependency on host.
#======================================================================================================================#
#-----------------------------# 3 User Set variables below. Uncomment and set paths. #------------------------------#
# BASEDIR=/home/jeff/.aurch-AUR
# AURREPO=/var/cache/pacman/aur
# REPONAME=aurrepo
#-------------------------------------------# Default variables list #----------------------------------------------#
# BASEDIR="${HOME}"/.cache/aurch/base						# HOST chroot base path
# AURREPO="${HOME}"/.cache/aurch/repo						# HOST aur repo path
# REPONAME=aur									# HOST aur repo name
#========================================================================================================================#
[[ ! -v BASEDIR ]] && BASEDIR="${HOME}"/.cache/aurch/base			# HOST    Set BASEDIR to default if unset
cd "${BASEDIR}" || { echo "[line ${LINENO}]"; exit 1 ; }			#         cd to BASEDIR
chroot="${BASEDIR}/chroot-$(< .#ID)"						# HOST    path to chroot root
chrbuilduser="/home/builduser"							# CHROOT  builduser home directory (same destination)
homebuilduser="${chroot}"/home/builduser					# HOST    builduser home directory (same destination)
package="${2,,}"								#         Convert <package> to lower case
[[ ! -v AURREPO  ]] && AURREPO="${HOME}"/.cache/aurch/repo			# HOST    Set AURREPO to default if unset
[[ ! -v REPONAME ]] && REPONAME=aur						# HOST    Set REPONAME to default if unset
tmpc="/var/tmp/aurch"								# CHROOT  path to tmp dir (same destination)
tmph="${chroot}${tmpc}"								# HOST    path to tmp dir (same destination)
#-------------------------------------------------------------------------------------------------------------------#
czm=$(echo -e '\033[1;96m'":: aurch ==>"'\033[00m')				# Aurch color pointer
error=$(echo -e '\033[1;91m' "ERROR:" '\033[00m')				# Red 'ERROR' text
line2=$(printf %"$(tput cols)"s |tr " " "-") 					# Set line '---' to terminal width
#========================================================================================================================#
# Print variables to .#aurch-vars

	cd "${BASEDIR}"									|| { echo "[line ${LINENO}]" ; exit 1 ; }
	echo "
	BASEDIR=${BASEDIR}
	AURREPO=${AURREPO}
	REPONAME=${REPONAME}
	chroot=${chroot}
	chrbuilduser=${chrbuilduser}
	homebuilduser=${homebuilduser}
	package=${package}
	tmpc=${tmpc}
	tmph=${tmph}" \
	| awk ' {print;} NR % 1 == 0 { print ""; }' > "${BASEDIR}"/.#aurch-vars

#========================================================================================================================#
help(){
cat << EOF
${line2}

NAME
	aurch - Isolates host system when building AUR packages from potential errors or malicious content

DESCRIPTION
	Aurch builds AUR packages from within a chroot, focused on using the chroot for build isolation.
	Not to be confused with building packages in a clean chroot. ie: devtools package scripts.
	Upon completing AUR builds, aurch places copies of the packages in the host AURREPO directory.
	It also manages the host local AUR repo databases and optionally, can install the AUR packages.
	It keeps the built AUR packages and dependencies in the chroot for possible future use.
	It automatically installs required pgp keys in the chroot.
	It automatically maintains a set package count in the chroot via automated cleanup.
	The chroot is intended to be reused rather than recreated for each package.

USAGE
		aurch [operation[options]] [package | pgp key]

OPERATIONS
		-B*  --build		Builds an AUR package in one step.
		-G  --git		Git clones an AUR package.
		-C  --compile		Builds an AUR package on existing PKGBUILD.
		-Rc  [--long NA]	Remove AUR pkg from chroot  /build/<package>, $HOME/<build dir>, and database entry.
		-Rh  [--long NA]	Remove AUR pkg from host /AURREPO/<package>, <package> if installed, and database entry.
		-Lu*  --listupdates	List updates available for AUR packages in chroot AUR repo.
		-Lc*  --listchroot	List contents of AUR db on chroot.
		-Lh*  --listhost	List contents of AUR db on host.
		    --clean		Manually remove unneeded packages from chroot.
		    --pgp		Manually import pgp key in chroot.
		-h, --help		Prints help.

OPTIONS
	-L, List:
		Append 'q' to list operations -L[u,c,h] for quiet mode.
		Example: aurch -Luq
		Do not mix order or attempt to use 'q' other than described.

	-B, Build:
		Append 'i' to build operation -B to install package in host.
		Example: aurch -Bi
		Do not mix order or attempt to use 'i' other than described.

OVERVIEW
		Run 'aurch --setup' before using aurch.
		Run aurch from directory containing chroot created during 'aurch --setup'.

EXAMPLES
		Create a directory to setup chroot in:		mkdir ~/aurbuilds
		Move into directory:				cd ~/aurbuilds
		Set up chroot:					aurch --setup		 
		Build an AUR package in the chroot:		aurch -B <aur-package>
		Git clone package				aurch -G <aur-package>
		Build (Compile) AUR pkg on existing PKGBUILD	aurch -C <aur-package>
		List chroot AUR repo updates available:		aurch -Lu
		List chroot AUR sync database contents:		aurch -Lc
		List host AUR sync database contents:		aurch -Lh
		Manually import a pgp key in chroot:		aurch --pgp <short or long key id>
		Manually remove unneeded packages in chroot:	aurch --clean

VARIABLES
		AURREPO </path/to/host/directory>
		AURREPO Default: /tmp/aurch

		To copy built AUR packages to host, set:
		AURREPO="/path/to/host/local-pacman-repo"
MISC
		Aurch runtime messages will be proceeded with this:	${czm}
		Aurch runtime errors will be proceeded with this:	${czm}${error}

${line2}
EOF
}
#========================================================================================================================#
is_it_available(){

	check=$(curl --compressed -s "https://aur.archlinux.org/rpc/?v=5\&type=info&arg\[\]=${package}" \
		| jshon -e results -a -e  Name \
		| awk -F\" '{print $2}')

if	[[ ${package} != "${check}" ]] ; then
	echo "${czm}${error}\"${package}\" not available. See: https://aur.archlinux.org/packages/"
	exit
fi
}
#========================================================================================================================#
fetch_pkg(){											# SC2120 Not args, its an awk command!

	is_it_available
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}" --pipe << EOF
	aur depends -b "${package}" | aur fetch -S - | tee >(awk -F\' '/Cloning/ {print $2}' >"${tmpc}"/cloned-pkgs.file)
EOF
if	[[ -s ${tmph}/cloned-pkgs.file ]]; then
	echo "${czm} Git cloned ${package} and/or it's dependencies:"
	nl "${tmph}"/cloned-pkgs.file
fi
}
#========================================================================================================================#
build_pkg(){

	rm -f "${tmph}"/*.file

	cacheB=$(find "${AURREPO}"/*pkg.tar* 2>/dev/null |sort)

	find "${chroot}"/build/*pkg.tar* 2>/dev/null >"${tmph}"/before.file

	cd "${homebuilduser}"									|| { echo "[line ${LINENO}]" ; exit 1 ; }

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}" --pipe bash << EOF
	aur depends -b "${package}" >"${tmpc}"/buildorder.file
	aur depends -n "${package}" | grep -v "${package}" >"${tmpc}"/dependencies.file
EOF
	echo "${czm} Buildorder list for ${package}:"
	nl "${tmph}"/buildorder.file

	echo "${czm} AUR dependencies list for ${package}:"
	nl "${tmph}"/dependencies.file

	readarray -t -O1 buildorder <"${tmph}"/buildorder.file

	depi=$(( ${#buildorder[*]} - 1 ))
	pkgi="${#buildorder[*]}"

for	dependency in "${buildorder[@]:0:${depi}}"
    do

	cd "${homebuilduser}/${dependency}"							|| { echo "[line ${LINENO}]" ; exit 1 ; }
	package="${dependency}"

	fetch_pgp_key

	echo "${czm} Building and installing ${buildorder[${pkgi}]} dependency: ${dependency}"

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${dependency}" --pipe \
	aur build -ns --margs -i
    done
        echo  "${czm} Building: ${buildorder[${pkgi}]}"

	cd "${homebuilduser}/${buildorder[${pkgi}]}"						|| { echo "[line ${LINENO}]" ; exit 1 ; }
	package="${buildorder[${pkgi}]}"

	fetch_pgp_key

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${buildorder[pkgi]}" --pipe bash << EOF
	aur build -fnsr |& tee >(grep 'WARNING:' >"${tmpc}"/warning.file) | tee >(grep 'Adding package' >"${tmpc}"/pkg-nv.file)
EOF
#------------------------------### Move packages to host, print results ###------------------------------#

	find "${chroot}"/build/*pkg.tar* 2>/dev/null >"${tmph}"/after.file

	comm -23 <(sort "${tmph}"/after.file) <(sort "${tmph}"/before.file) >"${tmph}"/move.file

	for pkg in $(< "${tmph}"/move.file)
    do
	cp "${pkg}" "${AURREPO}"								|| { echo "cp err [line ${LINENO}]"; exit 1 ; }
	basename "${pkg}" >> "${tmph}"/moved.file
    done
	cleanup_chroot

if	[[ -s  ${tmph}/moved.file ]] ; then
	echo "${czm} Copied AUR package/s to host AURREPO:"
	nl "${tmph}"/moved.file

    else #------------------------------### For rebuilt packages ###------------------------------#

	if	[[ -s "${tmph}"/warning.file ]]; then

		awk -F\' '{print $2}' "${tmph}"/pkg-nv.file \
		| xargs -I {} cp "${chroot}"/build/{} "${AURREPO}"				|| { echo "cp err [line ${LINENO}]"; exit 1 ; }
		echo "${czm} Copied rebuilt pkgs to host AURREPO:"
		awk -F\' '{print $2}' "${tmph}"/pkg-nv.file | nl
	fi
fi
	cacheA=$(find "${AURREPO}"/*pkg.tar*|sort)
	comm -23 <(printf '%s\n' "${cacheA}") <(printf '%s\n' "${cacheB}") | tee > "${tmph}"/added-pkgs.file

	upd_aur_db
	sudo pacsync "${REPONAME}" >/dev/null

#------------------------------### Optionally install package ###------------------------------#
			
if	[[ "${1}" == -Bi ]]; then
	echo "${czm} Installing ${buildorder[${pkgi}]} in host."
	sudo pacsync "${REPONAME}"
	if	! sudo pacman -S "${buildorder[${pkgi}]}"; then

	### Added 'pacman -U' fallback option. Pkgs registered in 'aur.db' are not '--foreign' ###

	echo "${czm} pacman 'expected download size exceeded' error. Using aurch fallback option."
		if	[[ -s ${tmph}/move.file ]]; then
			xargs -a "${tmph}"/move.file -I {} sudo pacman -U --noconfirm "${AURREPO}"/{}
    	    	else
			awk -F\' '{print $2}' "${tmph}"/pkg-nv.file | xargs -I {} sudo pacman -U --noconfirm "${AURREPO}"/{}
		fi
	fi
fi
}
#========================================================================================================================#
upd_aur_db(){

if	find "${AURREPO}"/*.db.tar.gz &>/dev/null && [[ -s "${tmph}"/added-pkgs.file ]]; then
	echo "${czm} Adding package/s to host 'AURREPO' database"

	for pkg in $(< "${tmph}"/added-pkgs.file)
   do
	repo-add "${AURREPO}"/"${REPONAME}".db.tar.gz "${pkg}"
   done
    else
	echo "${czm} No new or updated packages detected in AURREPO."
	echo " Rebuilt packages overwrite existing packages in AURREPO."
fi
}
#========================================================================================================================#
check_updates(){

	cd "${homebuilduser}"									|| { echo "[line ${LINENO}]" ; exit 1 ; }

	rm -f /tmp/check-ud-updates
	readarray -t dirs < <(find "${homebuilduser}" -maxdepth 1 -mindepth 1 -type d -name "[!.]*" -printf '%f\n')

if	[[ $1 != -Luq ]]; then
	echo "${czm} Checking for updates on:"
	printf '%s\n' "${dirs[@]}" | nl
fi
	for pkg in "${dirs[@]}"
    do
	cd "${homebuilduser}/${pkg}"								|| { echo "[line ${LINENO}]" ; exit 1 ; }
	localHEAD=$(git rev-parse HEAD)
	remoteHEAD=$(git ls-remote --symref -q  | head -1 | cut -f1)

	if	[[ ${localHEAD} != "${remoteHEAD}" ]]; then
		echo " ${pkg}" >> /tmp/check-ud-updates
	fi
    done
if	[[ -s  /tmp/check-ud-updates ]]; then
	if	[[ $1 != -Luq ]]; then
		echo >> /tmp/check-ud-updates
		echo "${czm}  Updates available:"
	fi
	cat /tmp/check-ud-updates
    else
	if	[[ $1 != -Luq ]]; then
		echo "${czm} No updates available."
	fi
fi

}
#========================================================================================================================#
fetch_pgp_key(){

	echo "${czm} Checking pgp key for ${package}."

if	[[ -e .SRCINFO ]]; then
	echo "[sudo] to run systemd-nspawn on chroot."
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe \
	awk '/validpgpkeys/ {print $3}' .SRCINFO >pgp-keys.file					# SC2024: Is not ran as sudo within chroot.
    else
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe \
	makepkg --printsrcinfo | awk '/validpgpkeys/ {print $3}' >pgp-keys.file
fi
if	[[ -s pgp-keys.file ]] ; then
	for key in $(< pgp-keys.file); do
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe bash << EOF
	gpg --keyserver keyserver.ubuntu.com --recv-key "${key}" 2>&1 | grep -v 'insecure memory'
EOF
	done
    else
	rm pgp-keys.file
fi
}
#========================================================================================================================#
cleanup_chroot(){

if	[[ ! -e ${tmph}/orig-pkgs.log ]]; then
	awk '{print $2}'  "${BASEDIR}"/.#orig-pkgs.log | sort  >"${tmph}"/orig-pkgs.log
fi
	echo "${czm} Checking/Cleaning chroot."
	sudo systemd-nspawn -q -D "${chroot}" --pipe bash << EOF
	comm -23 <(pacman -Qq) <(cat "${tmpc}"/orig-pkgs.log) | xargs  pacman -Rns --noconfirm 2>/dev/null \
	|| echo " Package count: $(pacman -b "${chroot}/var/lib/pacman/" --config "${chroot}/etc/pacman.conf" --noconfirm -Qq | wc -l)"
EOF
}
#========================================================================================================================#
list_pkgs_host(){

if	[[ ${1} == -Lhq ]]; then
	opt1='-Slq' 
    else
	opt1='-Sl'
	echo "[sudo] to run pacsync on aur db." ; echo
        sudo pacsync "${REPONAME}" &>/dev/null
fi
	pacman --color=always "${opt1}" "${REPONAME}" | awk '{$1="" ; print}' | nl | column -t
}
list_pkgs_chroot(){
if	[[ ${1} == -Lcq ]]; then
	opt2='-Slq'
    else
	opt2='-Sl'
	echo "[sudo] to run systemd-nspawn on chroot."
	sudo systemd-nspawn -q -D "${chroot}" << EOF pacsync aur &>/dev/null ; echo
EOF
fi
	pacman --color=always -b "${chroot}/var/lib/pacman/" --config "${chroot}/etc/pacman.conf" --noconfirm "${opt2}" aur \
	| awk '{$1="" ; print}' | nl | column -t
}
#========================================================================================================================#
remove(){

if	[[ -n ${pkg} ]]; then

	if	[[ ${1} == -Rc ]]; then
		if	pacman -b "${chroot}/var/lib/pacman/" \
				--config "${chroot}/etc/pacman.conf" \
				-Slq aur \
			| grep -q "${pkg}"; then
			repo-remove "${chroot}"/build/aur.db.tar.gz "${pkg}"
			cd "${chroot}"/build							|| { echo "[line ${LINENO}]" ; exit 1 ; }

			remove=$(find "${pkg}"*.pkg.tar*)
			rm  "${remove}" && echo "${czm} Removed ${remove} from /build."
			cd "${homebuilduser}"							|| { echo "[line ${LINENO}]" ; exit 1 ; }
			sudo rm -rd "${pkg}"
			sudo systemd-nspawn -q -D "${chroot}" --pipe pacsync aur
		    else
			echo "${czm} ${pkg} is not present in chroot AUR repo."
		fi
	fi
	if	[[ ${1} == -Rh ]]; then
		if	pacman -Q "${pkg}" &>/dev/null ; then
			sudo pacman -Rns "${pkg}" 
		fi
	cd "${AURREPO}"										|| { echo "[line ${LINENO}]" ; exit 1 ; }
	remove=$(find "${pkg}"*.pkg.tar*)
	rm "${remove}" 2>/dev/null
		if	pacman -Slq "${REPONAME}" | grep -q "${pkg}"; then
			repo-remove "${AURREPO}"/"${REPONAME}".db.tar.gz "${pkg}"
			sudo pacsync "${REPONAME}"
		    else
			echo "${czm} Package ${pkg} is not present in host AUR repo."
		fi
	fi
    else
	echo "${czm} Need to specify package."
fi
}
#========================================================================================================================#
manual_pgp_key(){

	sudo systemd-nspawn -q -D "${chroot}" -u builduser  --pipe \
	gpg --keyserver keyserver.ubuntu.com --recv-key "${key}"				# SC2154: key is assigned in option parsing.
exit
}
#=======================================### Aurch called with no args ###================================================#
if      [[ -z ${*} ]]; then
cat << EOF
 OPERATIONS     -B*       build AUR package
		-G        git clone package
		-C        build on existing git clone
		-Rc       remove AUR pkg from chroot 
		-Rh       remove AUR pkg from host
		-Lu*      list updates chroot
		-Lc*      list AUR db chroot
		-Lh*      list AUR db host
		--clean   remove unneeded packages
		--pgp     import pgp key
		--setup   builds new chroot
		-h        help

 *OPTIONS	-L [u,c,h]   q  for quiet
		-B           i  for install

 Chroot ID	$(basename "${chroot}")"

EOF
fi
#========================================================================================================================#  
while :; do
	case "${1}" in
	-B*|--build)           fetch_pkg ; build_pkg "${1}"                                ;;		# SC2119 Bash scripts contain awk code.
	-G|--git)              fetch_pkg                                                   ;;		# This is related to SC2120...
	-C|--compile)          build_pkg                                                   ;;		# SC is incorrectly reading awk as bash.
	-R*)                   pkg="${2}" remove "${1}"                                    ;;
	-Lu*|--listupdates)    check_updates "${1}"                                        ;;
	-Lh*|--listhost)       list_pkgs_host "${1}"                                       ;;
	-Lc*|--listchroot)     list_pkgs_chroot "${1}"                                     ;;
	--clean)               cleanup_chroot                                              ;;
	--setup)               setup_chroot                                                ;;
	--pgp)                 key="${2}" manual_pgp_key                                   ;;
	-h|--help)             help                                                        ;;
	-?*)                   echo "${czm}${error} Input error. Running --help" ; help    ;;
	*)                     break
        esac
    shift
done
