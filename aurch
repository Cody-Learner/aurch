#!/bin/bash
# aurch 2021-11-20
# dependencies: arch-install-scripts base-devel git *
# * Aurutils is installed and setup in the chroot. Not as a dependency on host.

#========================================================================================================================#

basedir="$(pwd)"						# HOST  base directory		  : /home/aurch-chroot/
[[ ! -s ${basedir}/.#ID ]] && mktemp -u XXX > .#ID		# Create unique chroot suffix.
chroot="${basedir}/chroot-$(< .#ID)"				# HOST path to ${basedir}	  : /home/aurch-chroot/chroot-xxx
chrbuilduser="/home/builduser"					# CHROOT builduser home directory : /home/builduser
homebuilduser="${basedir}/chroot-$(< .#ID)/home/builduser"	# HOST   builduser home directory : /home/<user>/Testing/2/chroot-<xxx>/home/builduser/
package="${2,,}"						# Convert <package> to lower case.
[[ ! -v AURREPO ]] && AURREPO="/tmp/aurch"			# HOST  local pacman aur repo.
[[ ! -d ${AURREPO} ]] && mkdir "${AURREPO}"			# Create host AUR repo.
czm=$(echo -e '\033[1;96m'":: aurch ==>"'\033[00m')		# Aurch color pointer.
error=$(echo -e '\033[1;91m' "ERROR:" '\033[00m')		# Red 'ERROR' text.
line2=$(printf %"$(tput cols)"s |tr " " "-")			# Set line '---' to terminal width.
ccq="sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g'"			# Remove color code from czm.

#========================================================================================================================#

help(){
cat << EOF

NAME
	aurch - sets up and builds AUR packages in chroot

DESCRIPTION
	Aurch creates a chroot, sets up aurutils with a local AUR repo*, and sets up 'builduser'* in the directory it's ran in.
	Can be used for various AUR package related tasks including '-B 'for easy one command builds.
	Upon completing AUR build/s, aurch will place copy/s of the package/s in the host AURREPO file.
	Keeps a copy of all AUR packages and dependencies built in the chroot for future use.
	Automatically installs all required pgp keys in the chroot.
	Automatically maintains a 144 package count in the chroot via automated cleanup.
	The chroot is intended to be reused.
	Does not perform 'clean chroot' builds.
	The emphasis of this script is using a chroot for 'build isolation' rather than 'clean building'.

	*(within the chroot)

${line2}

Usage:
		aurch [operation] [package | pgp key]


Operations: 
		    --setup		Sets up a chroot
		-B  --build		Builds an AUR package in one step
		-G  --git		Git clones an AUR package			(allows modification before building)
		-C  --compile		Builds an AUR package on existing PKGBUILD
		    --clean		Manually remove unneeded packages from chroot
		    --pgp		Manually import pgp key in chroot
		-h, --help		Prints help

Overview:
		Run 'aurch --setup' before using aurch.
		Run aurch from directory containing chroot created during 'aurch --setup'.

Examples:
		Create a directory to setup chroot in:		mkdir ~/aurbuilds
		Move into directory:				cd ~/aurbuilds
		Set up chroot:					aurch --setup		 
		Build an AUR package in the chroot:		aurch -B <aur-package>
		Git clone package				aurch -G <aur-package>
		Build (Compile) AUR pkg on existing PKGBUILD	aurch -C <aur-package>
		Manually import a pgp key in chroot:		aurch --pgp <short or long key id>
		Manually remove unneeded packages in chroot:	aurch --clean

Variables:
		AURREPO </path/to/host/directory>
		AURREPO Default: /tmp/aurch

		To copy built AUR packages to host, set:
		AURREPO="/path/to/host/local-pacman-repo"
Misc:
		${czm} Aurch runtime messages will be proceeded with this.
		${czm}${error}Aurch runtime errors will be proceeded with this.

${line2}
EOF
}
#========================================================================================================================#

setup_up(){

	mkdir "${chroot}"

	sudo chown root:root "${chroot}"

if	sudo pacstrap "${chroot}" base base-devel git ; then

	echo "${czm} Pacstrap finished chroot install."
	sleep 2

	cd "${chroot}"										|| { echo "[line ${LINENO}]" ; exit ; }

	sudo rm -rd "${chroot}"/var/lib/pacman/sync/*.db
	sudo systemd-nspawn -q 	pacman -Syy							|| { echo "[line ${LINENO}]" ; exit ; }

	sudo systemd-nspawn -q    useradd -m -G wheel -s /bin/bash builduser
	sudo systemd-nspawn -q    mkdir /build
	sudo systemd-nspawn -q    chown builduser:builduser /build

	sudo systemd-nspawn -q sed -i '$a\#'                        /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '$a\# Path to aurt.conf'      /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '$a\Include = /etc/aurt.conf' /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '/CacheDir/s/^#//g'           /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '/ParallelDownloads/s/^#//g'  /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '/VerbosePkgLists/s/^#//g'    /etc/pacman.conf

	echo "${czm} Following is the contents of new file: /etc/aurt.conf"

cat	<<-EOF	  | sudo tee "${chroot}"/etc/aurt.conf

	[options]
	CacheDir    = /build
	CleanMethod = KeepInstalled

	[aur]
	SigLevel = Optional TrustAll
	Server = file:///build

EOF
    else
	echo "${czm} Pacstrap failed."
fi
	cd "${basedir}"										|| { echo "[line ${LINENO}]" ; exit ; }

if	[[ -d  ${chroot}/build ]] && [[ -d ${homebuilduser} ]] ; then

	printf '%s\n' "%wheel ALL=(ALL) NOPASSWD: ALL"  > 01-sudoers-addendum
	sudo chown root:root 01-sudoers-addendum
	sudo mv ./01-sudoers-addendum "${chroot}/etc/sudoers.d/01-sudoers-addendum"

	sudo systemd-nspawn -q   -D "${chroot}"   -u builduser \
	install -d /build -o builduser

	sudo systemd-nspawn -q   -D "${chroot}"   -u builduser \
	repo-add /build/aur.db.tar.gz

	sudo systemd-nspawn -q   -D "${chroot}"  \
	pacman -Sy

	sudo systemd-nspawn -q  -D "${chroot}"  -u builduser --chdir="${chrbuilduser}" --pipe \
	git clone https://aur.archlinux.org/aurutils.git
		
	sudo systemd-nspawn -q  -D "${chroot}"  -u builduser --chdir="${chrbuilduser}"/aurutils --pipe \
	makepkg -si --noconfirm

	sudo pacman	-r "${chroot}" \
			-b "${chroot}/var/lib/pacman/" \
			--config "${chroot}/etc/pacman.conf" \
			--noconfirm -Qq \
			| nl > .#orig-pkgs.log

	if	[[ -e  aurch.README ]]; then
		rm aurch.README
	fi

	touch aurch.README
	echo; echo "${czm} Setup completed."					| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo "${czm} Chroot has base, base-devel, git, and aurutils installed."	| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo "${czm} User builduser is set up, no password required for sudo."	| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo "${czm} Local chroot AUR repo is setup as /build."			| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo "${czm} Do not alter #.ID file in base directory."			| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo
    else
	echo; echo "${czm} User setup failed."
fi

}
#========================================================================================================================#

is_it_available(){

	check=$(curl --compressed -s "https://aur.archlinux.org/rpc/?v=5\&type=info&arg\[\]=${package}" \
		| jshon -e results -a -e  Name \
		| awk -F\" '{print $2}')

if	[[ ${package} != "${check}" ]] ; then
	echo "${czm}${error}\"${package}\" not available. See: https://aur.archlinux.org/packages/"
	exit
fi

}
#========================================================================================================================#

fetch_pkg(){

	is_it_available

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}" \
	aur fetch -Sr "${package}" | tee >(awk -F\' '/Cloning/ {print $2}' >"${homebuilduser}"/cloned-pkgs)
	#[SAVE] -S Alias for --sync=auto
	#[SAVE] -r Download packages and their dependencies

if	[[ -s ${homebuilduser}/cloned-pkgs ]]; then
	echo "${czm} Git cloned ${package} and/or it's dependencies:"
	nl "${homebuilduser}"/cloned-pkgs
    else
	echo "${czm} ${package} and/or it's AUR depends already available in chroot."
fi

}
#========================================================================================================================#

build_pkg(){

	cacheB=$(find "${AURREPO}"/*pkg.tar* 2>/dev/null |sort)

	find "${chroot}"/build/*pkg.tar* 2>/dev/null >"${homebuilduser}"/before

	cd "${homebuilduser}"									|| { echo "[line ${LINENO}]" ; exit ; }

	cat <<-EOF	> "${homebuilduser}/buildorder.sh"
	#!/bin/bash
	aur depends -b "${package}" >buildorder-file
	aur depends -n "${package}" | grep -v "${package}" >dependencies-file
EOF
	chmod +x "${homebuilduser}/buildorder.sh"

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}" --pipe \
	./buildorder.sh

	echo "${czm} Buildorder list for ${package}:"
	nl buildorder-file

	echo "${czm} AUR dependencies list for ${package}:"
	nl dependencies-file

	readarray -t -O1 buildorder <"${homebuilduser}"/buildorder-file

	depi=$(( ${#buildorder[*]} - 1 ))
	pkgi="${#buildorder[*]}"

for	dependency in "${buildorder[@]:0:${depi}}"
    do

	cd "${homebuilduser}/${dependency}"							|| { echo "[line ${LINENO}]" ; exit ; }
	package="${dependency}"

	fetch_pgp_key

	echo "${czm} Building and installing ${buildorder[${pkgi}]} dependency: ${dependency}"

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${dependency}" --pipe \
	aur build -ns --margs -i
    done
        echo  "${czm} Building: ${buildorder[${pkgi}]}"

	cd "${homebuilduser}/${buildorder[${pkgi}]}"						|| { echo "[line ${LINENO}]" ; exit ; }
	package="${buildorder[${pkgi}]}"

	fetch_pgp_key

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${buildorder[pkgi]}" --pipe \
	aur build -fnsr

	find "${chroot}"/build/*pkg.tar* 2>/dev/null >"${homebuilduser}"/after

	comm -23 <(sort "${homebuilduser}"/after) <(sort "${homebuilduser}"/before) >"${homebuilduser}"/move

	rm -f "${homebuilduser}"/moved

	for pkg in $(< "${homebuilduser}"/move)
    do
	cp "${pkg}" "${AURREPO}" || echo "${czm}${error} moving package."
	basename "${pkg}" >> "${homebuilduser}"/moved
    done

	cacheA=$(find "${AURREPO}"/*pkg.tar*|sort)

	comm -23 <(printf '%s\n' "${cacheA}") <(printf '%s\n' "${cacheB}") | tee > "${AURREPO}"/added-pkgs

	cleanup_chroot

if	[[ -s  ${homebuilduser}/moved ]] ; then
	echo "${czm} Copied AUR package/s to host AURREPO:"
	nl "${homebuilduser}"/moved
    else
	echo "${czm} Rebuilt ${package} available in chroot/build"
fi
	upd_aur_db
}
#========================================================================================================================#

upd_aur_db(){

if	find ${AURREPO}/*.db.tar.gz &>/dev/null && [[ -s ${AURREPO}/added-pkgs ]]; then

	echo "${czm} Adding package/s to host 'AURREPO'"

	for pkg in $(< ${AURREPO}/added-pkgs)
   do
	repo-add --new  /var/cache/pacman/aur/aur.db.tar "${pkg}"
#	sudo pacsync aur
   done
	rm ${AURREPO}/added-pkgs
fi
}



#========================================================================================================================#

fetch_pgp_key(){

	inject_receivekeys_script(){

	cat <<-'EOF'	> "${homebuilduser}/${package}/receivekeys"
	#!/bin/bash
	for key in $(< pgp-keys) ; do
	gpg --keyserver keyserver.ubuntu.com --recv-key "${key}"
	done
EOF
	sudo chmod +x "${homebuilduser}/${package}/receivekeys"
}
	echo "${czm} Checking pgp key for ${package}."

if	[[ -e .SRCINFO ]]; then
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe \
	awk '/validpgpkeys/ {print $3}' .SRCINFO >pgp-keys					# SC2024: Is not ran as sudo within chroot.
    else
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe \
	makepkg --printsrcinfo | awk '/validpgpkeys/ {print $3}' >pgp-keys
fi

if	[[ -s pgp-keys ]] ; then
	inject_receivekeys_script
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe \
	./receivekeys
    else
	rm pgp-keys
fi

}
#========================================================================================================================#

cleanup_chroot(){

if	[[ ! -e ${chroot}/root/base ]]; then
	sudo cp  "${basedir}"/.#orig-pkgs.log	"${chroot}"/root/base
fi

if	[[ ! -e ${chroot}/root/clean ]]; then

	cat <<-'EOF'	>"${homebuilduser}"/clean
	#!/bin/bash
	comm -23 <(pacman -Qq) <(awk '{print $2}' base) | xargs  pacman -Rns --noconfirm 2>/dev/null || \
	echo "     Package count: $(pacman -Qq | wc -l). Nothing to do."
EOF
	sudo mv "${homebuilduser}"/clean	"${chroot}"/root/clean
	sudo chown root:root "${chroot}"/root/clean
	sudo chmod +x "${chroot}"/root/clean
fi
	echo "${czm} Checking/Cleaning chroot."

	sudo systemd-nspawn -q -D "${chroot}"  --chdir=/root --pipe \
	./clean
}
#========================================================================================================================#
												
manual_pgp_key(){
	sudo systemd-nspawn -q -D "${chroot}" -u builduser  --pipe \
	gpg --keyserver keyserver.ubuntu.com --recv-key "${key}"				# SC2154: key is assigned in option parsing.
exit

}
#========================================================================================================================#
												# Aurch called with no args message.
if      [[ -z ${*} ]]; then
	echo "Aurch sets up and builds AUR packages in a chroot."
	echo "Chroot ID: $(basename "${chroot}")"
fi

#========================================================================================================================#

while :; do
	case "${1}" in
	-B|--build)		fetch_pkg ; build_pkg						;;
	-G|--git)		fetch_pkg							;;
	-C|--compile)		build_pkg							;;
	--clean)		cleanup_chroot							;;
	--setup)		setup_up							;;
	--testrun)		test_run							;;
	--pgp)			key="${2}" manual_pgp_key					;;
	-h|--help)		help								;;
	-?*)                    echo "${czm}${error} Input error. Running --help" ; help	;;
	*)			break
        esac
    shift
done
