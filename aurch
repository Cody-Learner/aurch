#!/bin/bash
# aurch 2021-11-14
# dependencies: arch-install-scripts base-devel git (AUR helper not required)*
# Aurch sets up a chroot and builds AUR packages from within it with aurutils. 
# Aurch focus is on package 'build isolation' rather than 'clean chroot builds'.

# * Aurutils is installed and setup in the chroot. Not required as a dependency on host.
#========================================================================================================================#

basedir="$(pwd)"						# HOST  base directory.		  : /home/aurch-chroot/
[[ ! -s ${basedir}/.#ID ]] && mktemp -u XXX > .#ID		# Creates unique chroot suffix.
chroot="${basedir}/chroot-$(< .#ID)"				# HOST path to ${basedir}	  : /home/aurch-chroot/chroot-xxx
chrbuilduser="/home/builduser"					# CHROOT builduser home directory.: /home/builduser
homebuilduser="${basedir}/chroot-$(< .#ID)/home/builduser"	# HOST   builduser home directory.: /home/<user>/Testing/2/chroot-<xxx>/home/builduser/
package="${2,,}"						# Converts <package> to lower case.
[[ ! -v AURREPO ]] && AURREPO="/tmp/aurch/"			# HOST  local pacman aur repo.
[[ ! -d ${AURREPO} ]] && mkdir "${AURREPO}"			# Creates host AUR repo.
czm=$(echo -e '\033[1;96m'":: aurch ==>"'\033[00m')		# Aurch color pointer
error=$(echo -e '\033[1;91m' "ERROR:" '\033[00m')		# Red 'ERROR' text
line2=$(printf %"$(tput cols)"s |tr " " "-")			# Sets line '---' to terminal width
ccq="sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g'"			# Remove color code from czm.

# Colors:	Black '\033[1;90m'   Red    '\033[1;91m'   Green '\033[1;92m'   Yellow '\033[1;93m'
#		Blue  '\033[1;94m'   Purple '\033[1;95m'   Cyan  '\033[1;96m'   White  '\033[1;97m'
# cancel '\033[00m'

# For troubleshooting:
# set -o xtrace
# export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
# echo -e '\033[00m'

# Options to eliminate gpg "using insecure memory warning" bug:
# 1) make gpg binary setuid root
# 2) add 'no-secmem-warning' to ~/.gnupg/gpg-conf
# 3) add this to end of gpg command in fetch_pgp_key function:   2>&1 | grep -v 'insecure memory'
#========================================================================================================================#

help(){
cat << EOF

NAME
	aurch - sets up and builds AUR packages in chroot

DESCRIPTION
	Aurch creates a chroot, sets up aurutils with a local AUR repo*, and sets up 'builduser'* in the directory it's ran in.
	Can be used for various AUR package related tasks including '-B 'for easy one command builds.
	Upon completing AUR build/s, aurch will place copy/s of the package/s in the host AURREPO file.
	Keeps a copy of all AUR packages and dependencies built in the chroot for future use.
	Automatically installs all required pgp keys in the chroot.
	Automatically maintains a 144 package count in the chroot via automated cleanup.
	The chroot is intended to be reused.
	Does not perform 'clean chroot' builds.
	The emphasis of this script is using a chroot for 'build isolation' rather than 'clean building'.

	*(within the chroot)

${line2}

Usage:
		aurch [operation] [package | pgp key] [--chrootpacman <pacman commands> <packages>]


Operations: 
		    --setup		Sets up a chroot
		-B  --build		Builds an AUR package in one step
		-G  --git		Git clones an AUR package			(allows modification before building)
		-C  --compile		Builds an AUR package on existing PKGBUILD
		    --clean		Manually remove unneeded packages from chroot
		    --pgp		Manually import pgp key in chroot
		-h, --help		Prints help

Overview:
		Run 'aurch --setup' before using aurch.
		Run aurch from directory containing chroot created during 'aurch --setup'.

Examples:
		Create a directory to setup chroot in:		mkdir ~/aurbuilds
		Move into directory:				cd ~/aurbuilds
		Set up chroot:					aurch --setup		 
		Build an AUR package in the chroot:		aurch -B <aur-package>
		Git clone package				aurch -G <aur-package>
		Build (Compile) AUR pkg on existing PKGBUILD	aurch -C <aur-package>
		Manually import a pgp key in chroot:		aurch --pgp <short or long key id>
		Manually remove unneeded packages in chroot:	aurch --clean

Variables:
		AURREPO </path/to/host/directory>
		Default: /tmp/aurch

		To have packages copied to local pacman repo or directory run or edit:
		AURREPO="/path/to/host-repo"
Misc:
		${czm} Aurch runtime messages will be proceeded with this.
		${czm}${error}Aurch runtime errors will be proceeded with this.

${line2}
EOF
}

#========================================================================================================================#

setup_up(){

	Database="${chroot}/var/lib/pacman/"
	Pacconf="${chroot}/etc/pacman.conf"


	mkdir "${chroot}"

	echo "[sudo] needed to run 'sudo chown root:root' on ${chroot} [line ${LINENO}]."
	sudo chown root:root "${chroot}"

if	sudo pacstrap "${chroot}" base base-devel git ; then

	echo "${czm} Pacstrap finished chroot install."
	sleep 2

	cd "${chroot}"									|| { echo "[line ${LINENO}]" ; exit ; }

	sudo rm -rd "${chroot}"/var/lib/pacman/sync/*.db
	sudo systemd-nspawn -q 	pacman -Syy						|| { echo "[line ${LINENO}]" ; exit ; }

	sudo systemd-nspawn -q    useradd -m -G wheel -s /bin/bash builduser
	sudo systemd-nspawn -q    mkdir /build
	sudo systemd-nspawn -q    chown builduser:builduser /build

	sudo systemd-nspawn -q sed -i '$a\#'                        /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '$a\# Path to aurt.conf'      /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '$a\Include = /etc/aurt.conf' /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '/CacheDir/s/^#//g'           /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '/ParallelDownloads/s/^#//g'  /etc/pacman.conf
	sudo systemd-nspawn -q sed -i '/VerbosePkgLists/s/^#//g'    /etc/pacman.conf

	echo "${czm} Following is the contents of new file: /etc/aurt.conf"

cat	<<-EOF   | sudo tee "${chroot}"/etc/aurt.conf

	[options]
	CacheDir    = /build
	CleanMethod = KeepInstalled

	[aur]
	SigLevel = Optional TrustAll
	Server = file:///build

EOF
    else
	echo "${czm} Pacstrap failed."
fi
	cd "${basedir}"										|| { echo "[line ${LINENO}]" ; exit ; }

if	[[ -d  ${chroot}/build ]] && [[ -d ${homebuilduser} ]] ; then

	printf '%s\n' "%wheel ALL=(ALL) NOPASSWD: ALL"  > 01-sudoers-addendum
	sudo chown root:root 01-sudoers-addendum
	sudo mv ./01-sudoers-addendum "${chroot}/etc/sudoers.d/01-sudoers-addendum"

	sudo systemd-nspawn -q   -D "${chroot}"   -u builduser \
	install -d /build -o builduser

	sudo systemd-nspawn -q   -D "${chroot}"   -u builduser \
	repo-add /build/aur.db.tar.gz

	sudo systemd-nspawn -q   -D "${chroot}"  \
	pacman -Sy

	sudo systemd-nspawn -q  -D "${chroot}"  -u builduser --chdir="${chrbuilduser}" --pipe \
	git clone https://aur.archlinux.org/aurutils.git
		
	sudo systemd-nspawn -q  -D "${chroot}"  -u builduser --chdir="${chrbuilduser}"/aurutils --pipe \
	makepkg -si --noconfirm

	sudo pacman -r "${chroot}" -b "${Database}" --config "${Pacconf}" --noconfirm -Qq | nl > .#orig-pkgs.log

	touch aurch.README
	echo; echo "${czm} Setup completed."					| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo "${czm} Chroot has base, base-devel, git, and aurutils installed."	| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo "${czm} User builduser is set up, no password required for sudo."	| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo "${czm} Local chroot AUR repo is setup as /build."			| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo "${czm} Do not alter #.ID file in base directory."			| tee >(eval "${ccq}" >>aurch.README) ; wait $!
	echo
    else
	echo; echo "${czm} User setup failed."
fi

}

#========================================================================================================================#

fetch_pkg(){

	cd										|| { echo "[line ${LINENO}]" ; exit ; }

	echo "[sudo] needed for 'systemd-nspawn' [line ${LINENO}]."

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}" \
	aur fetch -Sr "${package}" | tee >(awk -F\' '/Cloning/ {print $2}' >"${homebuilduser}"/cloned-pkgs)
	#[SAVE] -r Download packages and their dependencies
	#[SAVE] -S Alias for --sync=auto

if	[[ -s ${homebuilduser}/cloned-pkgs ]]; then
	echo "${czm} Git cloned ${package} and/or it's dependencies:"
	nl "${homebuilduser}"/cloned-pkgs							# SC2002: Printing file to screen with .
    else
	echo "${czm} The package ${package} and/or it's AUR depends are already available." 
fi

}

#========================================================================================================================#

build_pkg(){

	find "${chroot}"/build/*pkg.tar* 2>/dev/null >/tmp/before

	inject_build_order(){

		cat <<-EOF > "${homebuilduser}/buildorder.sh"
		#!/bin/bash
		aur depends -n "${package}" >buildorder-file
EOF
		chmod +x "${homebuilduser}/buildorder.sh"
	}

	cd "${homebuilduser}"								|| { echo "[line ${LINENO}]" ; exit ; }

	inject_build_order

	echo "[sudo] needed to run 'systemd-nspawn' [line ${LINENO}]."
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}" --pipe \
	./buildorder.sh

	echo "${czm} Buildorder list for ${package}:"
	nl buildorder-file

	readarray -t -O1 buildorder <"${homebuilduser}"/buildorder-file
	num=$(( $(printf '%s\n' "${#buildorder[*]}") - 1 ))

for	dependency in "${buildorder[@]:0:${num}}"
    do
	cd "${homebuilduser}/${dependency}"						|| { echo "[line ${LINENO}]" ; exit ; }
	package="${dependency}"

	fetch_pgp_key

	echo "${czm} Building and installing ${buildorder[${#buildorder[*]}]} dependency: ${dependency}"

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${dependency}" --pipe \
	aur build -ns --margs -i
    done
        echo  "${czm} Building: ${buildorder[${#buildorder[*]}]}"

	cd "${homebuilduser}/${buildorder[${#buildorder[*]}]}"				|| { echo "[line ${LINENO}]" ; exit ; }
	package="${buildorder[${#buildorder[*]}]}"

	fetch_pgp_key

	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${buildorder[${#buildorder[*]}]}" --pipe \
	aur build -fnsr

	find "${chroot}"/build/*pkg.tar* 2>/dev/null >/tmp/after

	comm -23 <(sort /tmp/after) <(sort /tmp/before) >"${homebuilduser}"/move

	rm -f /tmp/move

	for pkg in $(< "${homebuilduser}"/move); do
	basename "${pkg}" >> /tmp/move
	cp "${pkg}" "${AURREPO}" || echo "${czm}${error} moving package."

	done

	cleanup_chroot

	echo "${czm} Copied AUR package/s to host AURREPO:"
	nl /tmp/move

}

#========================================================================================================================#

fetch_pgp_key(){

	inject_receivekeys_script(){

	cat <<-'EOF' > "${homebuilduser}/${package}/receivekeys"
	#!/bin/bash
	for key in $(< pgp-keys) ; do
	gpg --keyserver keyserver.ubuntu.com --recv-key "${key}" 
	done
EOF
	sudo chmod +x "${homebuilduser}/${package}/receivekeys"
}
	echo "${czm} Checking pgp key for ${package}."

if	[[ -e .SRCINFO ]]; then
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe \
	awk '/validpgpkeys/ {print $3}' .SRCINFO >pgp-keys					# SC2024: Is not ran as sudo within chroot.
    else
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe \
	makepkg --printsrcinfo | awk '/validpgpkeys/ {print $3}' >pgp-keys
fi

if	[[ -s pgp-keys ]] ; then
	inject_receivekeys_script
	sudo systemd-nspawn -q -D "${chroot}" -u builduser --chdir="${chrbuilduser}/${package}" --pipe \
	./receivekeys
    else
	rm pgp-keys
fi

set +x

}

#========================================================================================================================#

cleanup_chroot(){

if	[[ ! -e ${chroot}/root/base ]]; then
	sudo cp  "${basedir}"/.#orig-pkgs.log	"${chroot}"/root/base
fi

if	[[ ! -e ${chroot}/root/clean ]]; then

	cat <<-'EOF'	>"${homebuilduser}"/clean
	#!/bin/bash
	comm -23 <(pacman -Qq) <(awk '{print $2}' base) | xargs  pacman -Rns --noconfirm 2>/dev/null || \

	echo "     Package count: $(pacman -Qq | wc -l). Nothing to do."
EOF
	sudo mv "${homebuilduser}"/clean	"${chroot}"/root/clean
	sudo chown root:root "${chroot}"/root/clean
	sudo chmod +x "${chroot}"/root/clean
fi
	echo "${czm} Removing unneeded dependencies in chroot."

	echo "[sudo] needed for systemd-nspawn [line ${LINENO}]"
	sudo systemd-nspawn -q -D "${chroot}"  --chdir=/root --pipe \
	./clean
}

#========================================================================================================================#

chroot_pacman(){

	Database="${chroot}/var/lib/pacman/"
	Pacconf="${chroot}/etc/pacman.conf"

	sudo pacman -r "${chroot}" -b "${Database}" --config "${Pacconf}" --noconfirm "${@}"
}

#========================================================================================================================#
												
manual_pgp_key(){
	sudo systemd-nspawn -q -D "${chroot}" -u builduser  --pipe \
	gpg --keyserver keyserver.ubuntu.com --recv-key "${key}"				# SC2154: key is assigned in option parsing.
exit

}

#========================================================================================================================#
						### If no args ###
if      [[ -z ${*} ]]; then
	echo "Aurch sets up and builds AUR packages in a chroot."
	echo "Chroot ID: $(basename "${chroot}")"
fi

#========================================================================================================================#

while :; do
	case "${1}" in
	-B|--build)		fetch_pkg ; build_pkg						;;
	-G|--git)		fetch_pkg							;;
	-C|--compile)		build_pkg							;;
	--clean)		cleanup_chroot							;;
	--setup)		setup_up							;;
	--chrootpacman)		shift; chroot_pacman "${@}"	  				;;
	--testrun)		test_run							;;
	--pgp)			key="${2}" manual_pgp_key					;;
	-h|--help)		help								;;
	-?*)                    echo "${czm}${error} Input error. Running --help" ; help	;;
	*)			break
        esac
    shift
done
